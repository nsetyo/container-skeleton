version: '3'

### Service Network ############################################################
networks:
  public:
    external:
      name: ${PROJECT_EXTERNAL_NETWORK:-traefik}
  backend:
    driver: bridge
  default:
    driver: bridge

services:
### Frontend Service ###########################################################
  frontend:
    image: ${COMPOSE_PROJECT_NAME}
    build:
      context: ./containers/node
      args:
        - NODEJS_VERSION=${NODEJS_VERSION:-latest}
        ### OS Timezone
        - TIMEZONE=${TIMEZONE:-Asia/Jakarta}
    command:
      - npm
      - run
      - dev
    working_dir: /app
    volumes :
      - ./cache/npm/:/root/.npm/
      - ./code-server/node:/root/.vscode-server
      - ${FRONTEND_DIR_HOST}:/app
    environment:
      - PUBLIC_URL=${PROJECT_HOSTNAME}
      - PORT=3000
    labels:
      - traefik.enable=true
      - traefik.http.services.fe-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=3000
      - traefik.http.routers.fe-${COMPOSE_PROJECT_NAME}.entrypoints=web-secure
      - traefik.http.routers.fe-${COMPOSE_PROJECT_NAME}.tls
      - traefik.http.routers.fe-${COMPOSE_PROJECT_NAME}.rule=Host(`${PROJECT_HOSTNAME}`)
    networks:
      - public
    expose:
      - 3000
### API Service ################################################################
  api:
    image   : nginx:alpine
    labels:
      - traefik.enable=true
      - traefik.http.services.api-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=80
      - traefik.http.routers.api-${COMPOSE_PROJECT_NAME}.entrypoints=web-secure
      - traefik.http.routers.api-${COMPOSE_PROJECT_NAME}.tls
      - traefik.http.routers.api-${COMPOSE_PROJECT_NAME}.rule=Host(`api.${PROJECT_HOSTNAME}`)
    volumes :
      - ./containers/nginx/backend-nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ${BACKEND_DIR_HOST:-./backend}/:/var/www
    networks:
      - backend
      - public
    depends_on:
      - ${BACKEND_ENGINE:-php-fpm}
  php-fpm:
    image: ${COMPOSE_PROJECT_NAME}-app
    build:
      context: ./containers/php
      args:
        - TIMEZONE=${TIMEZONE:-Asia/Jakarta}
        - PHP_VERSION=${PHP_VERSION:-7.4}
        ### Custom Install #####################################################
        - INSTALL_BCMATH=${INSTALL_BCMATH:-false}
        - INSTALL_BZIP=${INSTALL_BZIP:-false}
        - INSTALL_CALENDAR=${INSTALL_CALENDAR:-false}
        - INSTALL_COMPOSER=${INSTALL_COMPOSER:-false}
        - INSTALL_GD=${INSTALL_GD:-false}
        - INSTALL_GHOSTSCRIPT=${INSTALL_GHOSTSCRIPT:-false}
        - INSTALL_GMP=${INSTALL_GMP:-false}
        - INSTALL_ICONV=${INSTALL_ICONV:-false}
        - INSTALL_IMAGE_OPTIMIZERS=${INSTALL_IMAGE_OPTIMIZERS:-false}
        - INSTALL_IMAGEMAGICK=${INSTALL_IMAGEMAGICK:-false}
        - INSTALL_IMAP=${INSTALL_IMAP:-false}
        - INSTALL_INTL=${INSTALL_INTL:-false}
        - INSTALL_LDAP=${INSTALL_LDAP:-false}
        - INSTALL_MEMCACHED=${INSTALL_MEMCACHED:-false}
        - INSTALL_MONGO=${INSTALL_MONGO:-false}
        - INSTALL_MSSQL=${INSTALL_MSSQL:-false}
        - INSTALL_MYSQLI=${INSTALL_MYSQLI:-false}
        - INSTALL_OCI8=${INSTALL_OCI8:-false}
        - INSTALL_OPCACHE=${INSTALL_OPCACHE:-false}
        - INSTALL_PCNTL=${INSTALL_PCNTL:-false}
        - INSTALL_PGSQL=${INSTALL_PGSQL:-false}
        - INSTALL_PHPDBG=${INSTALL_PHPDBG:-false}
        - INSTALL_PHPREDIS=${INSTALL_PHPREDIS:-false}
        - INSTALL_SUPERVISOR=${INSTALL_SUPERVISOR:-false}
        - INSTALL_SYMFONY=${INSTALL_SYMFONY:-false}
        - INSTALL_TOKENIZER=${INSTALL_TOKENIZER:-false}
        - INSTALL_XDEBUG=${INSTALL_XDEBUG:-false}
        - INSTALL_ZIP_ARCHIVE=${INSTALL_ZIP_ARCHIVE:-false}
    networks:
      - backend
    environment:
      - PHP_INI_SCAN_DIR=/usr/local/etc/php/extra.d:/usr/local/etc/php/conf.d
    working_dir: ${BACKEND_WORKING_DIR:-/var/www}
    volumes:
      - ${BACKEND_DIR_HOST:-./backend}:/var/www
      - ./cache/composer/:/root/.composer/cache
      - ./containers/php/config.d:/usr/local/etc/php/extra.d
      - ./code-server/php/:/root/.vscode-server

### Database Service ###########################################################
  database:
    image: postgres:alpine
    networks:
      - backend
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - ${DB_DATA_PATH:-./storage/database}:/var/lib/postgresql/data:Z
  adminer:
    image: adminer
    labels:
      - traefik.enable=true
      - traefik.http.services.db-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8080
      - traefik.http.routers.db-${COMPOSE_PROJECT_NAME}.entrypoints=web-secure
      - traefik.http.routers.db-${COMPOSE_PROJECT_NAME}.tls
      - traefik.http.routers.db-${COMPOSE_PROJECT_NAME}.rule=Host(`db.${PROJECT_HOSTNAME}`)
    networks:
      - backend
      - public
    environment:
     - ADMINER_DEFAULT_SERVER=database
    depends_on:
      - database

### Search Service #############################################################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-7.15.1}
    user: root
    networks:
      - backend
      - public
    environment:
      - ES_SETTING_BOOTSTRAP_MEMORY__LOCK=true
      - ES_SETTING_CLUSTER_NAME=docker-cluster
      - ES_SETTING_DISCOVERY_TYPE=single-node
      - ES_SETTING_XPACK_SECURITY_ENABLED=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ${ELASTIC_DATA_PATH:-./storage/elasticsearch}:/usr/share/elasticsearch/data
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTICSEARCH_VERSION:-7.15.1}
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - TELEMETRY_ENABLED=false
    depends_on:
      - elasticsearch
    networks:
      - backend
      - public
    labels:
      - traefik.enable=true
      - traefik.http.services.kibana-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=5601
      - traefik.http.routers.kibana-${COMPOSE_PROJECT_NAME}.tls
      - traefik.http.routers.kibana-${COMPOSE_PROJECT_NAME}.rule=Host(`kibana.${PROJECT_HOSTNAME}`)
      - traefik.http.routers.kibana-${COMPOSE_PROJECT_NAME}.entrypoints=web-secure
